Assignment 2 for Business Analytics II
Jennifer Murray

# install and load packages
install.packages("ROCR")
install.packages("ggplot2")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("caret")
install.packages("e1071")

library(ROCR)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(caret)
library(e1071)

# get working directory and set it to where file is
getwd()
setwd("C:/Users/jmurra47/Desktop")

# read file in
data <- read.csv("election_campaign_data.csv", sep=",", header=T, strip.white = T, na.strings = c("NA","NaN","","?"))

# drop variables from the data set

data$cand_id <- NULL
data$last_name <- NULL
data$first_name <- NULL
data$twitterbirth <- NULL
data$facebookdate <- NULL
data$facebookjan <- NULL
data$youtubebirth <- NULL

# convert variables to factors using as.factor
data$twitter <- as.factor(data$twitter)
data$facebook <- as.factor(data$facebook)
data$youtube <- as.factor(data$youtube)
data$cand_ici <- as.factor(data$cand_ici)
data$gen_election <- as.factor(data$gen_election)

# remove observations with any missing values using function complete.cases()
data <- data[complete.cases(data),]

View(data)

# data has 929 observations of 21 variables

# how many classes does class attribute (gen_election) have?
summary(data)
# gen_election has two classes: wins or losses

# How many candidates had a Twitter campaign? Facebook campaign?
# from summary - 199 had twitter campaign and 242 had facebook campaign

# create decision tree with variable gen_election as target variable
# create training and test data

n = nrow(data)
trainIndex = sample(1:n, 
                    size = round(0.7*n), 
                    replace=FALSE)
train_data = data[trainIndex,]
test_data = data[-trainIndex,]
summary(train_data)
summary(test_data)

tree1 <- rpart(gen_election ~ twitter + facebook + youtube, data = train_data)
summary(tree1)
printcp(tree1)
plotcp(tree1)
plot(tree1, uniform=TRUE, 
     main="Classification Tree for Election Wins or Losses")
text(tree1, use.n=TRUE, all=TRUE, cex=.8)

# making a better looking decision tree

rpart.plot(tree1)

# how many candidates with a facebook account won?
# 1st node - has 172 observations under right son where facebook = 1

# variable importance?
summary(tree1)
# facebook = 41, youtube = 35, twitter = 24

# how many candidates were correctly classified in the decision tree?
rpart.plot(tree1)

# Which leaf node is the purest leaf node?


# Second tree
tree2 <- rpart(gen_election ~ twitter + facebook + youtube + ttl_receipts + cand_ici, data = train_data)
summary(tree2)
printcp(tree2)
plotcp(tree2)
plot(tree2, uniform=TRUE, 
     main="Classification Tree for Election Wins or Losses")
text(tree2, use.n=TRUE, all=TRUE, cex=.8)

# better looking Second tree
rpart.plot(tree2)

# variable importance?
summary(tree2)

# predicting model accuracy for first decision tree
predicted_values <- predict(tree1, test_data, type= "prob")
head(predicted_values)
threshold <- 0.5
pre <- factor( ifelse(predicted_values[,2] > threshold, "W", "L"))
head(pre)
levels(test_data$gen_election)[2]
confusionMatrix(pre, test_data$gen_election, 
                positive = levels(test_data$gen_election)[2])

# predicting model accuracy for second decision tree
predicted_values <- predict(tree2, test_data, type= "prob") # Use the classifier to make the predictions

head(predicted_values)
threshold <- 0.5
pred <- factor( ifelse(predicted_values[,2] > threshold, "W", "L"))
head(pred)
levels(test_data$gen_election)[2]
confusionMatrix(pred, test_data$gen_election, 
                positive = levels(test_data$gen_election)[2])
